<div class="row">
  <div class="large-12 columns">
    <h1>Epic Cycle Times</h1>
  <script>
      $(function () {
          var bisectDate = d3.bisector(function(d) { return d.completed ? d.completed : d.date; }).left;

          function cycleTimeTip(d, active) {
              var context = { d: d, active: active };
              return HandlebarsTemplates['epic_tooltip'](context);
          }

          function wipTip(d, active) {
              var context = { d: d, active: active };
              return HandlebarsTemplates['wip_tooltip'](context);
          }

          function drawChart(epics, wip) {
              var cycleTimeData = epics[0]
                      .filter(function(item) {
                          return item.issue.completed != null;
                      })
                      .map(function(item) {
                          return {
                              completed: datetime.parseTime(item.issue.completed),
                              cycleTime: item.cycle_time,
                              avg: item.mean,
                              sd: item.stddev,
                              epic: item.issue
                          };
                      });

              var wipData = Object.keys(wip[0]).map(function(date) {
                  return {
                      date: datetime.parseDate(date),
                      wip: wip[0][date].wip,
                      issues: wip[0][date].epics,
                      avg: wip[0][date].mean,
                      sd: wip[0][date].stddev
                  };
              });

              var chart = new CycleTimeChart({
                  container: '#container',
                  aspectRatio: 2.0,
                  margin: {top: 20, right: 30, bottom: 30, left: 40}
              });

              chart.bind();

              chart.setSeries(cycleTimeData, wipData);

              $('.d3-tip').remove();

              var cycleTimeArea = d3.svg.area()
                      .x(function(d) { return chart._xScale(d.completed); })
                      .y0(function(d) { return chart._yCycleTimeScale(d.avg - d.sd); })
                      .y1(function(d) { return chart._yCycleTimeScale(d.avg + d.sd); });

              chart.svg.append("path")
                      .datum(cycleTimeData)
                      .attr("class", "area")
                      .attr("d", cycleTimeArea)
                      .classed("cycle_time", true);

              var wipArea = d3.svg.area()
                      .x(function(d) { return chart._xScale(d.date); })
                      .y0(function(d) { return chart._yWipScale(d.avg - d.sd); })
                      .y1(function(d) { return chart._yWipScale(d.avg + d.sd); });

              chart.svg.append("path")
                      .datum(wipData)
                      .attr("class", "area")
                      .attr("d", wipArea)
                      .classed("wip", true);

              var focusActive = false;

              var tip = d3.tip().attr('class', 'd3-tip')
                      .direction(function(d) {
                          var y = d.cycleTime ? chart._yCycleTimeScale(d.cycleTime) : chart._yWipScale(d.wip);
                          return y > chart.getClientHeight() / 2 ? 'n' : 's';
                      })
                      .offset(function(d) {
                          var y = d.cycleTime ? chart._yCycleTimeScale(d.cycleTime) : chart._yWipScale(d.wip);
                          return y > chart.getClientHeight() / 2 ? [-10, 0] : [10, 0];
                      })
                      .html(function(d) {
                          var html = "";
                          if (d.cycleTime) {
                              html += cycleTimeTip(d, focusActive);
                          } else {
                              html += wipTip(d, focusActive);
                          }
                          return html;
                      });
              chart.svg.call(tip);

              var xAxis = d3.svg.axis()
                      .scale(chart._xScale)
                      .ticks(5)
                      .orient("bottom");

              chart.svg.append("g")
                      .attr("class", "x axis")
                      .attr("transform", "translate(0," + chart.getClientHeight() + ")")
                      .call(xAxis);

              var yCycleTimeAxis = d3.svg.axis()
                      .scale(chart._yCycleTimeScale)
                      .orient("left");

              chart.svg.append("g")
                      .attr("class", "y axis")
                      .call(yCycleTimeAxis);

              var yWipAxis = d3.svg.axis()
                      .scale(chart._yWipScale)
                      .tickFormat(d3.format("d"))
                      .orient("right");

              chart.svg.append("g")
                      .attr("class", "y axis")
                      .attr("transform", "translate(" + chart.getClientWidth() + ",0)")
                      .call(yWipAxis);



              var overlay = chart.svg.append('rect')
                      .attr('class', 'overlay')
                      .attr('width', chart.getClientWidth())
                      .attr('height', chart.getClientHeight());

              var focus = chart.svg.append('g').style('display', 'none');
              focus.append('circle')
                      .attr('id', 'focusCircle')
                      .attr('r', 5);

              overlay.on('click', function() { focusActive = false; tip.hide(); focus.style('display', 'none'); })
                      .on('mousemove', function() {
                          function getMouseXY(self) {
                              var mouse = d3.mouse(self);
                              return { x: mouse[0], y: mouse[1] };
                          }

                          function getCycleTimeXY(index) {
                              if (index < 0 || index >= cycleTimeData.length) {
                                  return { x: -999999, y: -999999, data: d };
                              }
                              var d = cycleTimeData[index];
                              return { x: chart._xScale(d.completed), y: chart._yCycleTimeScale(d.cycleTime), data: d };
                          }

                          function getWipXY(index) {
                              if (index < 0 || index >= wipData.length) {
                                  return { x: -999999, y: -999999, data: d };
                              }
                              var d = wipData[index];
                              return { x: chart._xScale(d.date), y: chart._yWipScale(d.wip), data: d };
                          }

                          function distanceSq(p0, p1) {
                              return Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2);
                          }

                          function getClosestCycleTimeXY(p) {
                              var mouseDate = chart._xScale.invert(mouse.x);
                              var i = bisectDate(cycleTimeData, mouseDate); // returns the index to the current data item
                              var p0 = getCycleTimeXY(i - 1);
                              var p1 = getCycleTimeXY(i);

                              p0.dist = distanceSq(p0, mouse);
                              p1.dist = distanceSq(p1, mouse);

                              // work out which date value is closest to the mouse
                              return p0.dist > p1.dist ? p1 : p0;
                          }

                          function getClosestWipXY(p) {
                              var mouseDate = chart._xScale.invert(mouse.x);
                              var i = bisectDate(wipData, mouseDate); // returns the index to the current data item
                              var p0 = getWipXY(i - 1);
                              var p1 = getWipXY(i);

                              p0.dist = distanceSq(p0, mouse);
                              p1.dist = distanceSq(p1, mouse);

                              // work out which date value is closest to the mouse
                              return p0.dist > p1.dist ? p1 : p0;
                          }

                          var mouse = getMouseXY(this);
                          var pCycleTime = getClosestCycleTimeXY(mouse);
                          var pWip = getClosestWipXY(mouse);

                          if (focusActive) {
                              return;
                          }

                          if (pCycleTime.dist < pWip.dist && pCycleTime.dist < 2500) {
                              focus.select('#focusCircle')
                                      .attr('cx', pCycleTime.x)
                                      .attr('cy', pCycleTime.y)
                                      .attr('class', 'cycle_time')
                                      .on('click', function() {
                                          focusActive = true;
                                          tip.show(pCycleTime.data, target);
                                      });
                              var target = d3.selectAll("circle.cycle_time").filter(function(d) { return d == pCycleTime.data; })[0][0];
                              tip.show(pCycleTime.data, target);
                              tip.attr('class', 'd3-tip cycle_time');
                              focus.style('display', null);
                          } else {
                              focus.select('#focusCircle')
                                      .attr('cx', pWip.x)
                                      .attr('cy', pWip.y)
                                      .attr('class', 'wip')
                                      .on('click', function() {
                                          focusActive = true;
                                          tip.show(pWip.data, target);
                                      });

                              var target = d3.selectAll("circle.wip").filter(function(d) { return d == pWip.data; })[0][0];
                              tip.show(pWip.data, target);
                              tip.attr('class', 'd3-tip wip');
                              focus.style('display', null);
                          }
                      });
          }

          function drawReport() {
              var filter = $('#filter').val();
              $.when(
                      $.get('<%= project_path(@project) %>/data/cycle_times.json?issue_type=Epic&filter=' + filter),
                      $.get('<%= project_path(@project) %>/data/wip.json?issue_type=Epic&filter=' + filter)
              ).done(drawChart);
          }

          drawReport();

          $('#filter').on('change', drawReport);
          $(window).resize(drawReport);
      });

  </script>



    <svg id="container" class="chart"></svg>

    <form>
      <div class="row">
        <div class="large-4 columns">
          <label>Date Filter</label>
          <input id="filter" type="text" value="<%= "#{(Date.today - 1.year).strftime('%d %b %Y')} - #{Date.today.strftime('%d %b %Y')}"  %>" />
        </div>
      </div>
    </form>
  </div>
</div>