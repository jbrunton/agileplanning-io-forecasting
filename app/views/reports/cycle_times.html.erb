<div class="row">
  <div class="large-12 columns">
    <h1>Epic Cycle Times</h1>

  <style>
      #container, .d3-tip {
          font-family: "Lato","Helvetica Neue",Helvetica,Arial,sans-serif;
          color: #525263;
          font-size: 12px;
          font-weight: 300;
      }

      .d3-tip {
          line-height: 1;
          padding: 12px;
          border: solid 1px rgba(200, 200, 200, 0.8);
          background: rgba(250, 250, 250, 0.8);
          pointer-events: none !important;
      }

      .axis path,
      .axis line {
          fill: none;
          stroke: grey;
          shape-rendering: crispEdges;
      }

      .chart circle {
          fill: white;
      }

      .chart circle.cycle_time {
          stroke: indianred;
          stroke-width: 1.5px;
      }


      .chart circle.wip {
          stroke: steelblue;
          stroke-width: 1.5px;
      }

      .chart .line {
          fill: none;
          stroke-width: 1.5px;
          stroke-opacity: 0.6;
      }

      .chart .line.wip {
          stroke: steelblue;
      }

      .chart .line.cycle_time {
          stroke: indianred;
          stroke-width: 2px;
      }

      .chart .area.cycle_time {
          fill: indianred;
          opacity: 0.15;
      }

      .chart .overlay {
          fill: none;
          stroke: none;
          pointer-events: all;
      }

      #focusCircle {
          fill: white;
          cursor: pointer;
      }

      #container {
          width: 100%;
      }
  </style>

  <script>
      $(function () {
          var parseDate = d3.time.format("%Y-%m-%d").parse;
          var parseTime = d3.time.format("%Y-%m-%dT%H:%M:%S.%LZ").parse;

          function formatIssueLink(issue) {
              return '<a href="/issues/' + issue.id + '">'
                      + issue.summary
                      + '</a>';
          }

          function formatJiraLink(issue) {
              return '<a href="<%= "#{@project.domain}/browse/" %>' + issue.key + '">[JIRA]</a>';
          }

          function pickSample(cycleTimeData, index) {
              // Uses the same computation as in Jira. See:
              // https://confluence.atlassian.com/display/AGILE/Viewing+the+Control+Chart

              // Pick a sample of 20% of the data set, and a minimum of 5
              var sampleSize = Math.round(Math.max(5, cycleTimeData.length * 0.2));
              // ensure an odd size, so that the sample is taken equally from around the index
              if (sampleSize % 2 == 0) sampleSize += 1;

              var startIndex = Math.max(0, index - Math.floor(sampleSize / 2));
              var endIndex = Math.min(startIndex + sampleSize, cycleTimeData.length);

              // if we're at the end of the array, reduce startIndex until we meet our sample size
              while (endIndex - startIndex < sampleSize && startIndex > 0) {
                  --startIndex;
              }

              var sample = cycleTimeData.slice(startIndex, endIndex);

              return sample;
          }

          function computeRollingAverage(cycleTimeData) {
              cycleTimeData.forEach(function(d, index) {
                  var sample = pickSample(cycleTimeData, index);
                  d.avg = d3.mean(sample, function(d) { return d.cycleTime; });
                  d.sd = d3.deviation(sample, function(d) { return d.cycleTime; });
              });
          }

          function cycleTimeTip(d, active) {
              var html = "Cycle Time: <b>" +
                      d.cycleTime.toFixed(1) + "</b><br />" +
                      d.summary;
              if (active) {
                  html += "<br />started: " + parseTime(d.epic.started).toLocaleString();
                  html += "<br />completed: " + parseTime(d.epic.completed).toLocaleString();
              }
              return html;
          }

          function wipTip(d, active) {
              var html = "WIP: <b>" + d.wip + "</b>";
              if (active) {
                  d.issues.forEach(function(issue) {
                     html += "<br />" + issue.summary;
                  });
              }
              return html;
          }

          function drawChart(epics, wip) {
              var cycleTimeData = epics[0]
                      .filter(function(epic) {
                          return epic.completed != null;
                      })
                      .map(function(epic) {
                          return {
                              date: parseTime(epic.completed),
                              cycleTime: epic.cycle_time,
                              id: epic.id,
                              key: epic.key,
                              summary: epic.summary,
                              epic: epic
                          };
                      });

              computeRollingAverage(cycleTimeData);

              var wipData = Object.keys(wip[0]).map(function(date) {
                  var issues = wip[0][date];
                  return {
                      date: parseDate(date),
                      wip: issues.length,
                      issues: issues
                  };
              });

              var allDates = cycleTimeData.map(function(d) { return d.date; })
                      .concat(wipData.map(function(d) { return d.date; }));

              var chartWidth = $('#container').width(),
                      chartHeight = chartWidth / 2;

              var margin = {top: 20, right: 30, bottom: 30, left: 40},
                      width = chartWidth - margin.left - margin.right,
                      height = chartHeight - margin.top - margin.bottom;

              var xScale = d3.time.scale()
                      .domain([d3.min(allDates), d3.max(allDates)])
                      .range([0, width], .1);

              var yCycleTimeScale = d3.scale.linear()
                      .domain([0, d3.max(cycleTimeData, function(d) { return d.cycleTime; })])
                      .range([height, 0]);

              var yWipScale = d3.scale.linear()
                      .domain([0, d3.max(wipData, function(d) { return d.wip; })])
                      .range([height, 0]);

              $('#container').empty();
              $('.d3-tip').remove();

              var chart = d3.select("#container")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              var cycleTimeLine = d3.svg.line()
                      .x(function(d) { return xScale(d.date); })
                      .y(function(d) { return yCycleTimeScale(d.avg); });

              var cycleTimeArea = d3.svg.area()
                      .x(function(d) { return xScale(d.date); })
                      .y0(function(d) { return yCycleTimeScale(d.avg - d.sd); })
                      .y1(function(d) { return yCycleTimeScale(d.avg + d.sd); });

              chart.append("path")
                      .datum(cycleTimeData)
                      .attr("class", "line")
                      .attr("d", cycleTimeLine)
                      .classed("cycle_time", true);

              chart.append("path")
                      .datum(cycleTimeData)
                      .attr("class", "area")
                      .attr("d", cycleTimeArea)
                      .classed("cycle_time", true);

              var wipLine = d3.svg.line()
                      .interpolate("monotone")
                      .x(function(d) { return xScale(d.date); })
                      .y(function(d) { return yWipScale(d.wip); });

              chart.append("path")
                      .datum(wipData)
                      .attr("class", "line")
                      .attr("d", wipLine)
                      .classed("wip", true);

              var focusActive = false;

              var tip = d3.tip().attr('class', 'd3-tip')
                      .direction(function(d) {
                          var y = d.cycleTime ? yCycleTimeScale(d.cycleTime) : yWipScale(d.wip);
                          return y > height / 2 ? 'n' : 's';
                      })
                      .offset(function(d) {
                          var y = d.cycleTime ? yCycleTimeScale(d.cycleTime) : yWipScale(d.wip);
                          return y > height / 2 ? [-10, 0] : [10, 0];
                      })
                      .html(function(d) {
                          var html = "";
                          if (d.cycleTime) {
                              html += cycleTimeTip(d, focusActive);
                          } else {
                              html += wipTip(d, focusActive);
                          }
                          return html;
                      });
              chart.call(tip);

              var xAxis = d3.svg.axis()
                      .scale(xScale)
                      .ticks(5)
                      .orient("bottom");

              chart.append("g")
                      .attr("class", "x axis")
                      .attr("transform", "translate(0," + height + ")")
                      .call(xAxis);

              var yCycleTimeAxis = d3.svg.axis()
                      .scale(yCycleTimeScale)
                      .orient("left");

              chart.append("g")
                      .attr("class", "y axis")
                      .call(yCycleTimeAxis);

              var yWipAxis = d3.svg.axis()
                      .scale(yWipScale)
                      .tickFormat(d3.format("d"))
                      .orient("right");

              chart.append("g")
                      .attr("class", "y axis")
                      .attr("transform", "translate(" + width + ",0)")
                      .call(yWipAxis);

              var cycleTimeCircle = chart.selectAll("circle.cycle_time")
                      .data(cycleTimeData)
                      .enter().append("circle")
                      .attr("cx", function(d) { return xScale(d.date); })
                      .attr("cy", function(d) { return yCycleTimeScale(d.cycleTime); })
                      .attr("r", 3)
                      .classed("cycle_time", true);

              var wipCircle = chart.selectAll("circle.wip")
                      .data(wipData)
                      .enter().append("circle")
                      .attr("cx", function(d) { return xScale(d.date); })
                      .attr("cy", function(d) { return yWipScale(d.wip); })
                      .attr("r", 1.5)
                      .classed("wip", true);

              var bisectDate = d3.bisector(function(d) { return d.date; }).left;

              var overlay = chart.append('rect')
                      .attr('class', 'overlay')
                      .attr('width', width)
                      .attr('height', height);

              var focus = chart.append('g').style('display', 'none');
              focus.append('circle')
                      .attr('id', 'focusCircle')
                      .attr('r', 5);

              overlay.on('click', function() { focusActive = false; tip.hide(); focus.style('display', 'none'); })
                      .on('mousemove', function() {
                          function getMouseXY(self) {
                              var mouse = d3.mouse(self);
                              return { x: mouse[0], y: mouse[1] };
                          }

                          function getCycleTimeXY(index) {
                              if (index < 0 || index >= cycleTimeData.length) {
                                  return { x: -999999, y: -999999, data: d };
                              }
                              var d = cycleTimeData[index];
                              return { x: xScale(d.date), y: yCycleTimeScale(d.cycleTime), data: d };
                          }

                          function getWipXY(index) {
                              if (index < 0 || index >= wipData.length) {
                                  return { x: -999999, y: -999999, data: d };
                              }
                              var d = wipData[index];
                              return { x: xScale(d.date), y: yWipScale(d.wip), data: d };
                          }

                          function distanceSq(p0, p1) {
                              return Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2);
                          }

                          function getClosestCycleTimeXY(p) {
                              var mouseDate = xScale.invert(mouse.x);
                              var i = bisectDate(cycleTimeData, mouseDate); // returns the index to the current data item
                              var p0 = getCycleTimeXY(i - 1);
                              var p1 = getCycleTimeXY(i);

                              p0.dist = distanceSq(p0, mouse);
                              p1.dist = distanceSq(p1, mouse);

                              // work out which date value is closest to the mouse
                              return p0.dist > p1.dist ? p1 : p0;
                          }

                          function getClosestWipXY(p) {
                              var mouseDate = xScale.invert(mouse.x);
                              var i = bisectDate(wipData, mouseDate); // returns the index to the current data item
                              var p0 = getWipXY(i - 1);
                              var p1 = getWipXY(i);

                              p0.dist = distanceSq(p0, mouse);
                              p1.dist = distanceSq(p1, mouse);

                              // work out which date value is closest to the mouse
                              return p0.dist > p1.dist ? p1 : p0;
                          }

                          var mouse = getMouseXY(this);
                          var pCycleTime = getClosestCycleTimeXY(mouse);
                          var pWip = getClosestWipXY(mouse);

                          if (focusActive) {
                              return;
                          }

                          if (pCycleTime.dist < pWip.dist && pCycleTime.dist < 2500) {
                              focus.select('#focusCircle')
                                      .attr('cx', pCycleTime.x)
                                      .attr('cy', pCycleTime.y)
                                      .attr('class', 'cycle_time')
                                      .on('click', function() {
                                          focusActive = true;
                                          tip.show(pCycleTime.data, target);
                                      });
                              var target = d3.selectAll("circle.cycle_time").filter(function(d) { return d == pCycleTime.data; })[0][0];
                              tip.show(pCycleTime.data, target);
                              focus.style('display', null);
                          } else {
                              focus.select('#focusCircle')
                                      .attr('cx', pWip.x)
                                      .attr('cy', pWip.y)
                                      .attr('class', 'wip')
                                      .on('click', function() {
                                          focusActive = true;
                                          tip.show(pWip.data, target);
                                      });

                              var target = d3.selectAll("circle.wip").filter(function(d) { return d == pWip.data; })[0][0];
                              tip.show(pWip.data, target);
                              focus.style('display', null);
                          }
                      });
          }

          function drawReport() {
              var filter = $('#filter').val();
              $.when(
                      $.get('<%= project_path(@project) %>/cycle_times.json?filter=' + filter),
                      $.get('<%= project_path(@project) %>/wip.json?filter=' + filter)
              ).done(drawChart);
          }

          drawReport();

          $('#filter').on('change', drawReport);
          $(window).resize(drawReport);
      });

  </script>



    <svg id="container" class="chart"></svg>

    <form>
      <div class="row">
        <div class="large-4 columns">
          <label>Date Filter</label>
          <input id="filter" type="text" value="<%= "#{(Date.today - 1.year).strftime('%d %b %Y')} - #{Date.today.strftime('%d %b %Y')}"  %>" />
        </div>
      </div>
    </form>
  </div>
</div>