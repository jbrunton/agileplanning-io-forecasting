require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DashboardsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Dashboard. As you add validations to Dashboard, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { domain: 'http://example.com', board_id: '123', name: 'Some Board' }
  }

  let(:invalid_attributes) {
    { domain: '', board_id: '', name: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DashboardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let!(:dashboard) { create(:dashboard) }

  describe "GET #index" do
    it "assigns all dashboards as @dashboards" do
      get :index, {:domain_id => dashboard.domain.to_param}, valid_session
      expect(assigns(:dashboards)).to eq([dashboard])
    end
  end

  # describe "GET #epics" do
  #   let!(:issue) { create(:issue, dashboard: dashboard) }
  #   let!(:second_epic) { create(:issue, :completed, issue_type: 'Epic', dashboard: dashboard) }
  #   let!(:first_epic) { create(:issue, issue_type: 'Epic', dashboard: dashboard, completed: second_epic.completed - 1.day) }
  #
  #   it "assigns all the epics as @issues and orders them by completion date" do
  #     get :epics, {:id => dashboard.to_param, :format => :json}, valid_session
  #     expect(assigns(:issues)).to eq([first_epic, second_epic])
  #   end
  # end
  #
  # describe "GET #wip_histories" do
  #   let!(:issue) { create(:issue, :started, dashboard: dashboard) }
  #   let!(:wip_history) { WipHistory.create(date: issue.started, issue: issue) }
  #
  #   it "assigns the history to @wip_histories" do
  #     get :wip_histories, {:id => dashboard.to_param, :format => :json}, valid_session
  #     expect(assigns(:wip_histories)).to eq([wip_history])
  #   end
  # end

  describe "GET #show" do
    it "assigns the requested dashboard as @dashboard" do
      get :show, {:id => dashboard.to_param}, valid_session
      expect(assigns(:dashboard)).to eq(dashboard)
    end
  end

  describe "POST #sync" do
  end

end
